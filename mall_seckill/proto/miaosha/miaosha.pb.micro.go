// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/miaosha/miaosha.proto

package pbMiaoSha

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MiaoSha service

func NewMiaoShaEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MiaoSha service

type MiaoShaService interface {
	FrontMiaoSha(ctx context.Context, in *MiaoshaRequest, opts ...client.CallOption) (*MiaoShaResponse, error)
}

type miaoShaService struct {
	c    client.Client
	name string
}

func NewMiaoShaService(name string, c client.Client) MiaoShaService {
	return &miaoShaService{
		c:    c,
		name: name,
	}
}

func (c *miaoShaService) FrontMiaoSha(ctx context.Context, in *MiaoshaRequest, opts ...client.CallOption) (*MiaoShaResponse, error) {
	req := c.c.NewRequest(c.name, "MiaoSha.FrontMiaoSha", in)
	out := new(MiaoShaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MiaoSha service

type MiaoShaHandler interface {
	FrontMiaoSha(context.Context, *MiaoshaRequest, *MiaoShaResponse) error
}

func RegisterMiaoShaHandler(s server.Server, hdlr MiaoShaHandler, opts ...server.HandlerOption) error {
	type miaoSha interface {
		FrontMiaoSha(ctx context.Context, in *MiaoshaRequest, out *MiaoShaResponse) error
	}
	type MiaoSha struct {
		miaoSha
	}
	h := &miaoShaHandler{hdlr}
	return s.Handle(s.NewHandler(&MiaoSha{h}, opts...))
}

type miaoShaHandler struct {
	MiaoShaHandler
}

func (h *miaoShaHandler) FrontMiaoSha(ctx context.Context, in *MiaoshaRequest, out *MiaoShaResponse) error {
	return h.MiaoShaHandler.FrontMiaoSha(ctx, in, out)
}
