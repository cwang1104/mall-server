// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/product/product.proto

package pbProduct

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Products service

func NewProductsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Products service

type ProductsService interface {
	ProductList(ctx context.Context, in *ProductsRequest, opts ...client.CallOption) (*ProductsResponse, error)
	ProductAdd(ctx context.Context, in *ProductAddRequest, opts ...client.CallOption) (*ProductAddResponse, error)
	ProductDel(ctx context.Context, in *ProductDelRequest, opts ...client.CallOption) (*ProductAddResponse, error)
	ProductToEdit(ctx context.Context, in *ProductToEditRequest, opts ...client.CallOption) (*ProductToEditResponse, error)
	ProductDoEdit(ctx context.Context, in *ProductEditRequest, opts ...client.CallOption) (*ProductEditResponse, error)
}

type productsService struct {
	c    client.Client
	name string
}

func NewProductsService(name string, c client.Client) ProductsService {
	return &productsService{
		c:    c,
		name: name,
	}
}

func (c *productsService) ProductList(ctx context.Context, in *ProductsRequest, opts ...client.CallOption) (*ProductsResponse, error) {
	req := c.c.NewRequest(c.name, "Products.ProductList", in)
	out := new(ProductsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsService) ProductAdd(ctx context.Context, in *ProductAddRequest, opts ...client.CallOption) (*ProductAddResponse, error) {
	req := c.c.NewRequest(c.name, "Products.ProductAdd", in)
	out := new(ProductAddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsService) ProductDel(ctx context.Context, in *ProductDelRequest, opts ...client.CallOption) (*ProductAddResponse, error) {
	req := c.c.NewRequest(c.name, "Products.ProductDel", in)
	out := new(ProductAddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsService) ProductToEdit(ctx context.Context, in *ProductToEditRequest, opts ...client.CallOption) (*ProductToEditResponse, error) {
	req := c.c.NewRequest(c.name, "Products.ProductToEdit", in)
	out := new(ProductToEditResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsService) ProductDoEdit(ctx context.Context, in *ProductEditRequest, opts ...client.CallOption) (*ProductEditResponse, error) {
	req := c.c.NewRequest(c.name, "Products.ProductDoEdit", in)
	out := new(ProductEditResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Products service

type ProductsHandler interface {
	ProductList(context.Context, *ProductsRequest, *ProductsResponse) error
	ProductAdd(context.Context, *ProductAddRequest, *ProductAddResponse) error
	ProductDel(context.Context, *ProductDelRequest, *ProductAddResponse) error
	ProductToEdit(context.Context, *ProductToEditRequest, *ProductToEditResponse) error
	ProductDoEdit(context.Context, *ProductEditRequest, *ProductEditResponse) error
}

func RegisterProductsHandler(s server.Server, hdlr ProductsHandler, opts ...server.HandlerOption) error {
	type products interface {
		ProductList(ctx context.Context, in *ProductsRequest, out *ProductsResponse) error
		ProductAdd(ctx context.Context, in *ProductAddRequest, out *ProductAddResponse) error
		ProductDel(ctx context.Context, in *ProductDelRequest, out *ProductAddResponse) error
		ProductToEdit(ctx context.Context, in *ProductToEditRequest, out *ProductToEditResponse) error
		ProductDoEdit(ctx context.Context, in *ProductEditRequest, out *ProductEditResponse) error
	}
	type Products struct {
		products
	}
	h := &productsHandler{hdlr}
	return s.Handle(s.NewHandler(&Products{h}, opts...))
}

type productsHandler struct {
	ProductsHandler
}

func (h *productsHandler) ProductList(ctx context.Context, in *ProductsRequest, out *ProductsResponse) error {
	return h.ProductsHandler.ProductList(ctx, in, out)
}

func (h *productsHandler) ProductAdd(ctx context.Context, in *ProductAddRequest, out *ProductAddResponse) error {
	return h.ProductsHandler.ProductAdd(ctx, in, out)
}

func (h *productsHandler) ProductDel(ctx context.Context, in *ProductDelRequest, out *ProductAddResponse) error {
	return h.ProductsHandler.ProductDel(ctx, in, out)
}

func (h *productsHandler) ProductToEdit(ctx context.Context, in *ProductToEditRequest, out *ProductToEditResponse) error {
	return h.ProductsHandler.ProductToEdit(ctx, in, out)
}

func (h *productsHandler) ProductDoEdit(ctx context.Context, in *ProductEditRequest, out *ProductEditResponse) error {
	return h.ProductsHandler.ProductDoEdit(ctx, in, out)
}
