// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/admin/admin.proto

package pbAdmin

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Admin service

func NewAdminEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Admin service

type AdminService interface {
	AdminLogin(ctx context.Context, in *AdminRequest, opts ...client.CallOption) (*AdminResponse, error)
	GetUserList(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
}

type adminService struct {
	c    client.Client
	name string
}

func NewAdminService(name string, c client.Client) AdminService {
	return &adminService{
		c:    c,
		name: name,
	}
}

func (c *adminService) AdminLogin(ctx context.Context, in *AdminRequest, opts ...client.CallOption) (*AdminResponse, error) {
	req := c.c.NewRequest(c.name, "Admin.AdminLogin", in)
	out := new(AdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) GetUserList(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "Admin.GetUserList", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Admin service

type AdminHandler interface {
	AdminLogin(context.Context, *AdminRequest, *AdminResponse) error
	GetUserList(context.Context, *UserRequest, *UserResponse) error
}

func RegisterAdminHandler(s server.Server, hdlr AdminHandler, opts ...server.HandlerOption) error {
	type admin interface {
		AdminLogin(ctx context.Context, in *AdminRequest, out *AdminResponse) error
		GetUserList(ctx context.Context, in *UserRequest, out *UserResponse) error
	}
	type Admin struct {
		admin
	}
	h := &adminHandler{hdlr}
	return s.Handle(s.NewHandler(&Admin{h}, opts...))
}

type adminHandler struct {
	AdminHandler
}

func (h *adminHandler) AdminLogin(ctx context.Context, in *AdminRequest, out *AdminResponse) error {
	return h.AdminHandler.AdminLogin(ctx, in, out)
}

func (h *adminHandler) GetUserList(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.AdminHandler.GetUserList(ctx, in, out)
}
