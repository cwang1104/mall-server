// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/mall_user.proto

package mall_user

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Malluser service

func NewMalluserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Malluser service

type MalluserService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Malluser_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Malluser_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Malluser_BidiStreamService, error)
}

type malluserService struct {
	c    client.Client
	name string
}

func NewMalluserService(name string, c client.Client) MalluserService {
	return &malluserService{
		c:    c,
		name: name,
	}
}

func (c *malluserService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Malluser.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malluserService) ClientStream(ctx context.Context, opts ...client.CallOption) (Malluser_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Malluser.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &malluserServiceClientStream{stream}, nil
}

type Malluser_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ClientStreamRequest) error
}

type malluserServiceClientStream struct {
	stream client.Stream
}

func (x *malluserServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *malluserServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *malluserServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *malluserServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *malluserServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *malluserService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Malluser_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Malluser.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &malluserServiceServerStream{stream}, nil
}

type Malluser_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type malluserServiceServerStream struct {
	stream client.Stream
}

func (x *malluserServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *malluserServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *malluserServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *malluserServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *malluserServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *malluserService) BidiStream(ctx context.Context, opts ...client.CallOption) (Malluser_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Malluser.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &malluserServiceBidiStream{stream}, nil
}

type Malluser_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type malluserServiceBidiStream struct {
	stream client.Stream
}

func (x *malluserServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *malluserServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *malluserServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *malluserServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *malluserServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *malluserServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Malluser service

type MalluserHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Malluser_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Malluser_ServerStreamStream) error
	BidiStream(context.Context, Malluser_BidiStreamStream) error
}

func RegisterMalluserHandler(s server.Server, hdlr MalluserHandler, opts ...server.HandlerOption) error {
	type malluser interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type Malluser struct {
		malluser
	}
	h := &malluserHandler{hdlr}
	return s.Handle(s.NewHandler(&Malluser{h}, opts...))
}

type malluserHandler struct {
	MalluserHandler
}

func (h *malluserHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.MalluserHandler.Call(ctx, in, out)
}

func (h *malluserHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.MalluserHandler.ClientStream(ctx, &malluserClientStreamStream{stream})
}

type Malluser_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type malluserClientStreamStream struct {
	stream server.Stream
}

func (x *malluserClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *malluserClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *malluserClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *malluserClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *malluserClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *malluserHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.MalluserHandler.ServerStream(ctx, m, &malluserServerStreamStream{stream})
}

type Malluser_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type malluserServerStreamStream struct {
	stream server.Stream
}

func (x *malluserServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *malluserServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *malluserServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *malluserServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *malluserServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *malluserHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.MalluserHandler.BidiStream(ctx, &malluserBidiStreamStream{stream})
}

type Malluser_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type malluserBidiStreamStream struct {
	stream server.Stream
}

func (x *malluserBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *malluserBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *malluserBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *malluserBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *malluserBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *malluserBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
